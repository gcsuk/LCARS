@page "/admin/builds"

@inject HttpClient Http

@using LCARS.Data
@using System.ComponentModel.DataAnnotations

@if (settings is null)
{
    <Loading />
}
else
{
    if (error is not null)
    {
        <InputError Text="@error" />
    }
    else
    {
        <Header Text="Builds Admin" />
    }
    <EditForm Model=@settings OnValidSubmit=@FormSubmitted OnInvalidSubmit=@InvalidFormSubmitted>
        <DataAnnotationsValidator />
        <div>
            <label>Enabled</label>
            <InputCheckbox @bind-Value=settings.Enabled />
        </div>
        <div>
            <label>Access Token</label>
            <InputText @bind-Value=settings.AccessToken />
        </div>
        <SaveButton />
        <hr />
        <div>
            <label>Display Text</label>
            <InputText @bind-Value=DisplayName />
        </div>
        <div>
            <label>Build Type ID</label>
            <InputText @bind-Value=BuildTypeId />
        </div>
        <button @onclick="AddBuild" class="add">Add</button>
        <hr />
        @foreach (var item in settings.Builds)
        {
            <div><button @onclick="() => DeleteBuild(item)" class="delete">Delete</button> @item.DisplayName : @item.BuildTypeId </div>
        }
        <hr />
    </EditForm>
}

@code {
    string? error;
    string? DisplayName;
    string? BuildTypeId;
    BuildsModel settings = new();

    public record BuildsModel
    {
        public bool Enabled { get; set; }
        [Required]
        public string AccessToken { get; set; }
        public List<Data.Settings.TeamCitySettingsModel.TeamCityBuild> Builds { get; set; } = new();

    }

    protected override async Task OnInitializedAsync()
    {
        var currentSettings = await Http.GetFromJsonAsync<Settings>("settings");

        settings = new()
            {
                Enabled = currentSettings.TeamCitySettings.Enabled,
                AccessToken = currentSettings?.TeamCitySettings?.AccessToken ?? "",
                Builds = currentSettings.TeamCitySettings.Builds.ToList(),
            };
    }

    async Task AddBuild()
    {
        settings.Builds.Add(new Settings.TeamCitySettingsModel.TeamCityBuild
        {
            DisplayName = DisplayName,
            BuildTypeId = BuildTypeId
        });
        StateHasChanged();
    }

    async Task DeleteBuild(Settings.TeamCitySettingsModel.TeamCityBuild build)
    {
        settings.Builds.Remove(build);
        StateHasChanged();
    }

    async Task FormSubmitted(EditContext editContext)
    {
        await Http.PostAsJsonAsync<Settings.TeamCitySettingsModel>("settings/teamcity", new Settings.TeamCitySettingsModel
            {
                Enabled = settings.Enabled,
                AccessToken = settings.AccessToken,
                Builds = settings.Builds
            });
    }

    void InvalidFormSubmitted(EditContext editContext)
    {
        error = "Invalid. Please Try Again.";
    }
}