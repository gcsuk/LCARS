@page "/deployments"

<PageTitle>LCARS | Deployments</PageTitle>

@using LCARS.Data

@implements IDisposable
@inject HttpClient Http

<Header Text="Deployments" />

@if (deployments is null)
{
    <Loading />
}
else
{
    <table>
        <thead>
            <tr>
                <th>
                </th>

                @foreach (var environment in deployments.ToList()[0].Environments)
                {
                    <th>
                        <div class="environment">
                            <div class="left"></div>
                            <div class="label">@environment</div>
                            <div class="right"></div>
                        </div>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var project in deployments)
            {
                <tr>
                    <td class="projectName">
                        @project.ProjectName
                    </td>

                    @foreach (var deployment in project.Deployments)
                    {
                        var color = "green";

                        @if (deployment.State != "Success")
                        {
                            color = "red";
                        }
                        else if (deployment.HasWarningsOrErrors)
                        {
                            color = "yellow";
                        }

                        <td>
                            <div class="deployment">
                                <div class="left"></div>
                                <div class="label @color" title="@deployment.State"><a href="@deployment.WebUrl" target="_blank">@deployment.ReleaseVersion</a></div>
                                <div class="right"></div>
                            </div>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<ProjectDeployment>? deployments;
    private System.Timers.Timer refreshTimer = new(5000);

    protected override async Task OnInitializedAsync()
    {
        await RefreshDeployments();

        refreshTimer.Elapsed += async (sender, e) => await RefreshDeployments();
        refreshTimer.Enabled = true;
    }

    private async Task RefreshDeployments()
    {
        deployments = await Http.GetFromJsonAsync<IEnumerable<ProjectDeployment>>("/octopus");
        await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        refreshTimer.Enabled = false;
        refreshTimer.Dispose();
    }
}