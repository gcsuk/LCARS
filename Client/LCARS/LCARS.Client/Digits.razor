@implements IDisposable
@inject Data.AlertState alertState
@attribute [RenderModeInteractiveWebAssembly]

@output

@code {
    private Random randomiser = new();
    private MarkupString output;

    protected override async Task OnInitializedAsync()
    {
        await RenderDigits();

        var refreshTimer = new System.Timers.Timer(2000);

        refreshTimer.Elapsed += async (sender, e) => await RenderDigits();
        refreshTimer.Enabled = true;

        alertState.OnChange += StateHasChanged;
    }

    private async Task RenderDigits()
    {
        const int colCount = 13;
        const int rowCount = 6;

        var selectedRow = randomiser.Next(0, rowCount);

        var html = new System.Text.StringBuilder("<tbody>");

        for (var row = 0; row < rowCount; row++)
        {
            var rowClass = row == selectedRow ? "white" : "";
            html.AppendLine($"<tr class='{rowClass}'>");

            for (var col = 0; col < colCount; col++)
                html.Append($"<td>{randomiser.Next(1, 1000)}</td>");

            html.Append("</tr>");
        }

        html.Append("</tbody>");

        output = new MarkupString(html.ToString());

        await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        alertState.OnChange -= StateHasChanged;
    }
}