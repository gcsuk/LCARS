@inherits LayoutComponentBase
@inject Data.AlertState alertState;
@implements IDisposable

<PageTitle>LCARS</PageTitle>

<body class="@alertState.State">
    <header>
        <div id="header-left" class="left">
            @DateTime.Now.ToString("dd-MM-yyyy")
        </div>
        <div class="middle">
            <table>
                @output
            </table>
        </div>
        <div class="right">
            <div class="title">
                LCARS OPERATIONS <span>ONLINE</span>
            </div>
            <div class="buttons">
                <div><a href="">07-3215</a></div>
                <div><a href="">08-5012</a></div>
                <div><a href="">09-3123</a></div>
                <div><a href="">10-2415</a></div>
            </div>
        </div>
        <div class="box-pattern">
            <span />
            <span />
            <span />
            <span />
        </div>
    </header>
    <div class="body">
        <aside>
            <div>
                <span><a href="admin/github">CONFIG</a></span>
            </div>
            <div>
                <span><a href="">STATUS</a></span>
            </div>
            <div>
                <span><a href="">05-32456</a></span>
            </div>
            <div>
                <span><a href="">06-15868</a></span>
            </div>
        </aside>
        <main>
            <div class="box-pattern">
                <span />
                <span />
                <span />
                <span />
            </div>
            <div class="content">
                @Body
            </div>
        </main>
    </div>
</body>

@code {
    private Random randomiser = new();
    private MarkupString output = new();

    protected override async Task OnInitializedAsync()
    {
        await RenderDigits();

        var refreshTimer = new System.Timers.Timer(2000);

        refreshTimer.Elapsed += async (sender, e) => await RenderDigits();
        refreshTimer.Enabled = true;

        alertState.OnChange += StateHasChanged;
    }

    private async Task RenderDigits()
    {
        const int colCount = 13;
        const int rowCount = 6;

        var selectedRow = randomiser.Next(0, rowCount);

        var html = new System.Text.StringBuilder("<tbody>");

        for (var row = 0; row < rowCount; row++)
        {
            var rowClass = row == selectedRow ? "white" : "";
            html.AppendLine($"<tr class='{rowClass}'>");

            for (var col = 0; col < colCount; col++)
                html.Append($"<td>{randomiser.Next(1, 1000)}</td>");

            html.Append("</tr>");
        }

        html.Append("</tbody>");

        output = new MarkupString(html.ToString());

        await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        alertState.OnChange -= StateHasChanged;
    }
}